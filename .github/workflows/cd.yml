 # ðŸš€ cd.yml - Build, push y deploy
name: CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGISTRY: automationrepository.azurecr.io

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set image tag from commit SHA
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure ACR login
        run: az acr login --name automationrepository

      - name: Build and push Docker images
        run: |
          docker build -t $REGISTRY/frontend-image:${IMAGE_TAG} -t $REGISTRY/frontend-image:latest .
          docker push $REGISTRY/frontend-image:${IMAGE_TAG}
          docker push $REGISTRY/frontend-image:latest

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/hpa.yaml
          kubectl apply -f k8s/limitrange.yaml
          kubectl apply -f k8s/resourcequota.yaml
          kubectl set image deployment/frontend frontend=$REGISTRY/frontend-image:${IMAGE_TAG}

      - name: Get frontend LoadBalancer IP
        run: |
          echo "Waiting for LoadBalancer IP..."
          for i in {1..20}; do
            IP=$(kubectl get svc frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$IP" ]; then
              echo "Frontend is available at: http://$IP/"
              break
            else
              echo "Still waiting for IP..."
              sleep 10
            fi
          done